CREATE TABLE curso (
	id_curso INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	nome_curso VARCHAR(50) UNIQUE NOT NULL,
	ch INTEGER NOT NULL CHECK (ch > 0)
);

CREATE TABLE professor (
	id_prof INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	nome VARCHAR(100) NOT NULL,
	fk_id_curso INTEGER NOT NULL,
	FOREIGN KEY (fk_id_curso) REFERENCES curso(id_curso)
);

CREATE TABLE aluno (
	id_aluno INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	nome VARCHAR(100) NOT NULL,
	data_nasc DATE CHECK (data_nasc < Current_DATE),
	fk_id_curso INTEGER REFERENCES curso(id_curso)
);

CREATE TABLE matricula (
	id_aluno INTEGER REFERENCES aluno(id_aluno),
	id_curso INTEGER REFERENCES curso(id_curso),
	data_matricula DATE DEFAULT CURRENT_DATE,
	PRIMARY KEY (id_aluno, id_curso)
);

CREATE TABLE cliente (
	id_cliente INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	nome VARCHAR(100) NOT NULL,
	cpf VARCHAR(11) UNIQUE
);

CREATE TABLE pedido (
	fk_id_cliente INTEGER NOT NULL,
	FOREIGN KEY (fk_id_cliente) REFERENCES cliente(id_cliente)
);

CREATE TABLE produto(
	id_produto INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	preco INTEGER CHECK (preco > 0),
	categoria VARCHAR(20) DEFAULT 'Outros'
);

CREATE TABLE estoque (
	fk_id_produto INTEGER REFERENCES produto(id_produto),
	id_armazem INTEGER GENERATED BY DEFAULT AS IDENTITY,
	PRIMARY KEY (fk_id_produto, id_armazem)
);

CREATE TABLE funcionario(
	id_funcionario INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	id_gerente INTEGER REFERENCES funcionario(id_funcionario)
);

DROP TABLE IF EXISTS pedido;

CREATE TABLE pedido (
	fk_id_cliente INTEGER NOT NULL,
	FOREIGN KEY (fk_id_cliente) REFERENCES cliente(id_cliente)
    ON DELETE CASCADE
);

CREATE TABLE avaliacao(
	id_aluno INTEGER REFERENCES aluno(id_aluno),
	id_curso INTEGER REFERENCES curso(id_curso),
	nota DECIMAL(3,1) CHECK (nota >= 0 and nota <=0)
);

ALTER TABLE curso
ADD ativo BOOLEAN DEFAULT TRUE

ALTER TABLE aluno
ADD CONSTRAINT data_nasc CHECK (data_nasc < '2010-01-01');

ALTER TABLE professor
ADD CONSTRAINT fk_curso
FOREIGN KEY (fk_id_curso) REFERENCES curso(id_curso);

ALTER TABLE cliente
ADD email VARCHAR(256) UNIQUE

INSERT INTO curso (nome_curso, ch) VALUES
('Banco de dados', 80),
('Programação', 120);

INSERT INTO professor (nome, fk_id_curso) VALUES
('Guilerme Santiago', 1),
('Rafael Coura', 2);
